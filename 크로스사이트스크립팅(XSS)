## **크로스 사이트 스크립팅(Cross-Site Scripting, XSS)**

##### 공격자가 전달한 스크립트 코드가 사용자 브라우저를 통해서 실행되는 것

→ 사용자 브라우져 또는 사용자 PC의 저장된 정보를 탈취

→ 가짜 페이지를 만들어서 사용자로 하여금 추가 입력을 유도하고, 해당 정보를 탈취

→ 좀비화하여 원격에서 해당 PC를 조정 ⇒ BeEF

 John <script> alert(document.cookie)</script>

#### Reflective XSS (반사)

- 공격자가 전달한 스크립트 코드가 취약한 웹 서버를 경유해서 사용자 브라우저에 전달되는 방식 
- 입력값이 입력값 검증 또는 출력값 검증 없이 다음 화면 출력에 그대로 사용되는 경우에 발생

안녕! <%=request.getParameter("input")%>

<% 	

​	out.print("안녕! " + request.getParameter("input"));

%>

정상입력 : .../do.jsp?input=홍길동 => 안녕! 홍길동

비정상입출력 : .../do.jsp?input=<script>alert(document.cookie)</script>

 => 안녕! <script> alert(document.cookie)</script> => 해당 브라우저의 쿠키 값이 출력

### Stored XSS

공격자가 작성한 스크립트 코드가 취약한 서버에 저장되어 지속적으로 사용자 브라우저로 내려가서 실행되는 것 => 게시판

(공격자) 게시판 글쓰기 			--------------------> 					저장(서버)

 <script>...</script>                          <script>...</script>

(희생자) 게시판 글보기 -------------------------------------------------------

```
	<script>...</script>
```

### DOM XSS

개발자가 작성한 스크립트 코드의 취약점을 이용한 공격 기법

document.write(_____________)



**

WEB

교차자원공유(Cross Resource Sharing)

SOP(Same Origin Policy,동일 기원 정책

완화 =>  CORS(Cross Origin Resource Sharing)

ORIGIN : 스킴+호스트(도메인IP)+포트





## 크로스 사이트 요청 위조(CSRF)

서버로 전달된 요청을 요청 절차와 주체를 검증하지 않고 처리했을 때 발생

공격자가 심어 놓은 코드를 통한 자동화된 요청이 희생자의 권한으로 실행



- 패스워드 변경 신청 폼-------->패스워드 변경 처리

changePwProc.jsp

#1 인증(로그인) 여부를 판단

#2 변경에 필요한 정보(newPW) 가 포함되었는지 확인

#3 세션에서 사용자 정보를 추출(userId)

#4 update userId.Pw <- newPw



로그인한 사람만 볼수 있음 : <iframe src="changePwProc.jsp?newPW=123" width="0" height="0">
